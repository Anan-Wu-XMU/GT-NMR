out_dir: results
metric_best: mae
metric_agg: argmin
tensorboard_each_run: True  # Log to Tensorboard each run
accelerator: "cuda:0"
mlflow:
  use: False
  project: Exp
  name:
wandb:
    use: False
    project:
dataset:
  format: PyG-gt13C
  name: gt13C
  task: node
  task_type: regression
  transductive: False
  node_encoder: True
  node_encoder_name: customAtom
  node_encoder_bn: False
  edge_encoder: True
  edge_encoder_name: customBond
  edge_encoder_bn: False
  split_mode: random
  split: [0.8, 0.1, 0.1 ]
  customAtom_num_features: 37
  customBond_num_features: 4
posenc_RRWP:
  enable: True
  ksteps: 20
  add_identity: True
  add_node_attr: False
  add_inverse: False
train:
  mode: custom
  batch_size: 256
  eval_period: 1
  enable_ckpt: True  # Checkpointing can now be disabled to save I/O when e.g. just benchmarking.
  ckpt_best: True  # WARNING: Checkpoint every epoch a better model is found may increase I/O significantly.
  ckpt_clean: True # Delete old ckpt each time.
model:
    type: GritTransformer
    loss_fun: l1
    edge_decoding: dot
gt:
  layer_type: GritTransformer
  layers: 8
  n_heads: 8
  dim_hidden: 64  # `gt.dim_hidden` must match `gnn.dim_inner`
  dropout: 0.0
  layer_norm: False
  batch_norm: True
  update_e: True
  attn_dropout: 0.2
  attn:
    clamp: 5.
    act: 'signed_sqrt'
    full_attn: True
    edge_enhance: True
    O_e: True
    norm_e: True
    signed_sqrt: True
gnn:
  head: node_regression_head
  layers_pre_mp: 0
  layers_post_mp: 3  # Not used when `gnn.head: san_graph`
  dim_inner: 64  # `gt.dim_hidden` must match `gnn.dim_inner`
  batchnorm: True
  act: signed_sqrt
  dropout: 0.0
  agg: mean
  normalize_adj: False
optim:
  clip_grad_norm: True
  optimizer: adamW
  weight_decay: 1e-5
  base_lr: 0.001
  max_epoch: 50000
  num_warmup_epochs: 20
  scheduler: cosine_with_warmup
  min_lr: 1e-6
